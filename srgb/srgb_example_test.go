package srgb_test

import (
	"fmt"
	"github.com/mandykoh/prism/srgb"
)

func ExampleConvert8BitToLinear_generateLUT() {
	lut := [256]float64{}
	for i := range lut {
		lut[i] = srgb.Convert8BitToLinear(uint8(i))
	}

	fmt.Printf("[256]float64{")
	for i, v := range lut {
		if i%8 == 0 {
			fmt.Printf("\n\t")
		}
		fmt.Printf(" %v,", v)
	}
	fmt.Printf("\n}\n")

	// Output: [256]float64{
	//	 0, 0.0003035269835488375, 0.000607053967097675, 0.0009105809506465125, 0.00121410793419535, 0.0015176349177441874, 0.001821161901293025, 0.0021246888848418626,
	//	 0.0024282158683907, 0.0027317428519395373, 0.003035269835488375, 0.003346535763899161, 0.0036765073240474355, 0.004024717018496307, 0.004391442037410293, 0.004776953480693729,
	//	 0.005181516702338386, 0.005605391624202723, 0.006048833022857054, 0.006512090792594475, 0.006995410187265386, 0.007499032043226176, 0.008023192985384994, 0.008568125618069307,
	//	 0.009134058702220787, 0.00972121732023785, 0.010329823029626935, 0.010960094006488244, 0.011612245179743885, 0.012286488356915872, 0.01298303234217301, 0.013702083047289688,
	//	 0.014443843596092545, 0.01520851442291271, 0.01599629336550963, 0.016807375752887387, 0.017641954488384078, 0.018500220128379697, 0.019382360956935726, 0.020288563056652397,
	//	 0.021219010376003555, 0.022173884793387378, 0.023153366178110413, 0.024157632448504756, 0.02518685962736163, 0.026241221894849898, 0.027320891639074897, 0.028426039504420797,
	//	 0.029556834437808804, 0.03071344373299364, 0.03189603307301153, 0.033104766570885055, 0.03433980680868216, 0.03560131487502034, 0.03688945040110004, 0.0382043715953465,
	//	 0.03954623527673284, 0.04091519690685319, 0.04231141062080967, 0.043735029256973465, 0.045186204385675534, 0.046665086336880095, 0.04817182422688942, 0.04970656598412724,
	//	 0.05126945837404323, 0.052860647023180246, 0.054480276442442375, 0.0561284900496001, 0.05780543019106723, 0.059511238162981206, 0.06124605423161761, 0.06301001765316767,
	//	 0.06480326669290579, 0.06662593864377289, 0.06847816984440018, 0.07036009569659588, 0.07227185068231747, 0.07421356838014963, 0.07618538148130784, 0.07818742180518634,
	//	 0.08021982031446832, 0.0822827071298148, 0.08437621154414882, 0.08650046203654976, 0.08865558628577293, 0.09084171118340768, 0.09305896284668744, 0.09530746663096469,
	//	 0.09758734714186246, 0.09989872824711389, 0.10224173308810132, 0.10461648409110419, 0.1070231029782676, 0.10946171077829932, 0.1119324278369056, 0.11443537382697373,
	//	 0.11697066775851082, 0.11953842798834562, 0.12213877222960186, 0.12477181756095049, 0.12743768043564743, 0.1301364766903643, 0.13286832155381798, 0.13563332965520566,
	//	 0.13843161503245185, 0.14126329114027164, 0.1441284708580578, 0.14702726649759496, 0.14995978981060853, 0.15292615199615017, 0.1559264637078274, 0.15896083506088043,
	//	 0.16202937563911096, 0.1651321945016676, 0.16826940018969075, 0.17144110073282262, 0.17464740365558504, 0.17788841598362914, 0.18116424424986022, 0.184474994500441,
	//	 0.18782077230067784, 0.19120168274079136, 0.1946178304415758, 0.1980693195599489, 0.20155625379439704, 0.20507873639031693, 0.20863687014525575, 0.21223075741405523,
	//	 0.21586050011389923, 0.21952619972926923, 0.2232279573168085, 0.22696587351009834, 0.23074004852434912, 0.23455058216100524, 0.23839757381227097, 0.2422811224655549,
	//	 0.24620132670783548, 0.2501582847299534, 0.25415209433082675, 0.25818285292159576, 0.26225065752969623, 0.26635560480286247, 0.2704977910130658, 0.27467731206038465,
	//	 0.2788942634768104, 0.28314874042999205, 0.2874408377269175, 0.29177064981753587, 0.2961382707983211, 0.3005437944157765, 0.3049873140698863, 0.3094689228175085,
	//	 0.31398871337571754, 0.3185467781250918, 0.32314320911295075, 0.32777809805654223, 0.33245153634617935, 0.3371636150483303, 0.3419144249086609, 0.34670405635502954,
	//	 0.35153259950043936, 0.3564001441459435, 0.3613067797835095, 0.3662525955988395, 0.3712376804741491, 0.37626212299090644, 0.3813260114325301, 0.386429433787049,
	//	 0.3915724777497232, 0.39675523072562685, 0.40197777983219574, 0.40724021190173665, 0.41254261348390375, 0.4178850708481375, 0.4232676699860717, 0.4286904966139067,
	//	 0.4341536361747489, 0.4396571738409188, 0.44520119451622786, 0.4507857828382234, 0.45641102318040466, 0.462076999654407, 0.467783796112159, 0.4735314961480096,
	//	 0.4793201831008268, 0.48514994005607043, 0.4910208498478356, 0.4969329950608704, 0.5028864580325687, 0.5088813208549338, 0.5149176653765214, 0.5209955732043543,
	//	 0.5271151257058131, 0.5332764040105052, 0.5394794890121071, 0.5457244613701865, 0.5520114015120001, 0.5583403896342678, 0.5647115057049292, 0.5711248294648732,
	//	 0.5775804404296505, 0.5840784178911641, 0.5906188409193369, 0.5972017883637634, 0.6038273388553378, 0.6104955708078648, 0.6172065624196511, 0.6239603916750761,
	//	 0.6307571363461468, 0.6375968739940326, 0.6444796819705821, 0.6514056374198242, 0.6583748172794485, 0.6653872982822722, 0.6724431569576875, 0.679542469633094,
	//	 0.6866853124353134, 0.6938717612919899, 0.7011018919329731, 0.7083757798916868, 0.7156935005064808, 0.7230551289219692, 0.7304607400903537, 0.737910408772731,
	//	 0.7454042095403874, 0.752942216776078, 0.7605245046752924, 0.7681511472475071, 0.7758222183174236, 0.7835377915261935, 0.7912979403326302, 0.7991027380144091,
	//	 0.8069522576692516, 0.8148465722161012, 0.8227857543962835, 0.8307698767746546, 0.83879901174074, 0.8468732315098579, 0.8549926081242337, 0.8631572134541023,
	//	 0.8713671191987972, 0.8796223968878318, 0.8879231178819663, 0.8962693533742664, 0.9046611743911496, 0.9130986517934192, 0.9215818562772946, 0.9301108583754237,
	//	 0.938685728457888, 0.9473065367331999, 0.955973353249286, 0.9646862478944651, 0.9734452903984124, 0.9822505503331171, 0.9911020971138298, 1,
	//}
}

func ExampleConvertLinearTo8Bit_generateLUT() {
	lut := [512]uint8{}
	for i := range lut {
		lut[i] = srgb.ConvertLinearTo8Bit(float64(i) / 511)
	}

	fmt.Printf("[512]uint8{")
	for i, v := range lut {
		if i%16 == 0 {
			fmt.Printf("\n\t")
		}
		fmt.Printf(" %d,", v)
	}
	fmt.Printf("\n}\n")

	// Output: [512]uint8{
	//	 0, 6, 13, 18, 22, 25, 28, 31, 34, 36, 38, 40, 42, 44, 46, 48,
	//	 50, 51, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70,
	//	 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	//	 86, 87, 88, 89, 90, 91, 91, 92, 93, 94, 95, 95, 96, 97, 98, 98,
	//	 99, 100, 101, 101, 102, 103, 103, 104, 105, 106, 106, 107, 108, 108, 109, 110,
	//	 110, 111, 111, 112, 113, 113, 114, 115, 115, 116, 116, 117, 118, 118, 119, 119,
	//	 120, 121, 121, 122, 122, 123, 123, 124, 125, 125, 126, 126, 127, 127, 128, 128,
	//	 129, 129, 130, 130, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137,
	//	 137, 138, 138, 139, 139, 140, 140, 140, 141, 141, 142, 142, 143, 143, 144, 144,
	//	 145, 145, 146, 146, 147, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 151,
	//	 152, 152, 153, 153, 154, 154, 154, 155, 155, 156, 156, 156, 157, 157, 158, 158,
	//	 159, 159, 159, 160, 160, 161, 161, 161, 162, 162, 163, 163, 163, 164, 164, 165,
	//	 165, 165, 166, 166, 166, 167, 167, 168, 168, 168, 169, 169, 169, 170, 170, 171,
	//	 171, 171, 172, 172, 172, 173, 173, 174, 174, 174, 175, 175, 175, 176, 176, 176,
	//	 177, 177, 177, 178, 178, 179, 179, 179, 180, 180, 180, 181, 181, 181, 182, 182,
	//	 182, 183, 183, 183, 184, 184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 187,
	//	 188, 188, 188, 189, 189, 189, 190, 190, 190, 191, 191, 191, 192, 192, 192, 193,
	//	 193, 193, 193, 194, 194, 194, 195, 195, 195, 196, 196, 196, 197, 197, 197, 198,
	//	 198, 198, 198, 199, 199, 199, 200, 200, 200, 201, 201, 201, 201, 202, 202, 202,
	//	 203, 203, 203, 204, 204, 204, 204, 205, 205, 205, 206, 206, 206, 206, 207, 207,
	//	 207, 208, 208, 208, 208, 209, 209, 209, 210, 210, 210, 210, 211, 211, 211, 212,
	//	 212, 212, 212, 213, 213, 213, 214, 214, 214, 214, 215, 215, 215, 215, 216, 216,
	//	 216, 217, 217, 217, 217, 218, 218, 218, 218, 219, 219, 219, 220, 220, 220, 220,
	//	 221, 221, 221, 221, 222, 222, 222, 222, 223, 223, 223, 224, 224, 224, 224, 225,
	//	 225, 225, 225, 226, 226, 226, 226, 227, 227, 227, 227, 228, 228, 228, 228, 229,
	//	 229, 229, 229, 230, 230, 230, 230, 231, 231, 231, 231, 232, 232, 232, 232, 233,
	//	 233, 233, 233, 234, 234, 234, 234, 235, 235, 235, 235, 236, 236, 236, 236, 237,
	//	 237, 237, 237, 238, 238, 238, 238, 239, 239, 239, 239, 239, 240, 240, 240, 240,
	//	 241, 241, 241, 241, 242, 242, 242, 242, 243, 243, 243, 243, 243, 244, 244, 244,
	//	 244, 245, 245, 245, 245, 246, 246, 246, 246, 246, 247, 247, 247, 247, 248, 248,
	//	 248, 248, 249, 249, 249, 249, 249, 250, 250, 250, 250, 251, 251, 251, 251, 251,
	//	 252, 252, 252, 252, 253, 253, 253, 253, 253, 254, 254, 254, 254, 255, 255, 255,
	//}
}
